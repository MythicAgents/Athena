from mythic_container.MythicCommandBase import *
import json
from mythic_container.MythicRPC import *

from .athena_utils import message_converter


class JxaArguments(TaskArguments):
    def __init__(self, command_line, **kwargs):
        super().__init__(command_line, **kwargs)
        self.args = [            
            CommandParameter(
                name="code",
                type=ParameterType.String,
                description="Lines to execute",
                parameter_group_info=[
                    ParameterGroupInfo(
                        required=True,
                        group_name="Default",
                    )
                ],
            ),
             CommandParameter(
                name="file",
                type=ParameterType.File,
                description="",
                parameter_group_info=[
                    ParameterGroupInfo(
                        required=True,
                        group_name="Script File",
                    )
                ],
            ),]

    async def parse_arguments(self):
        if self.command_line[0] == "{":
            self.load_args_from_json_string(self.command_line)
        else:
            self.add_arg("code", self.command_line)


class JxaCommand(CommandBase):
    cmd = "jxa"
    needs_admin = False
    help_cmd = "jxa [code]"
    description = "Execute jxa code"
    version = 1
    author = "@checkymander"
    attackmapping = ["T1082"]
    argument_class = JxaArguments
    attributes = CommandAttributes(
    )
    async def create_go_tasking(self, taskData: PTTaskMessageAllData) -> PTTaskCreateTaskingMessageResponse:
        groupName = taskData.args.get_parameter_group_name()
        response = PTTaskCreateTaskingMessageResponse(
            TaskID=taskData.Task.ID,
            Success=True,
        )

        if groupName == "Script File":
            file = await SendMythicRPCFileGetContent(MythicRPCFileGetContentMessage(taskData.args.get_arg("file")))
            
            if file.Success:
                file_contents = base64.b64encode(file.Content)
                taskData.args.add_arg("scriptcontents", file_contents.decode("utf-8"), parameter_group_info=[ParameterGroupInfo(
                    required=True,
                    group_name="Script File"
                )])
            else:
                raise Exception("Failed to get file contents: " + file.Error)
        return response

    async def process_response(self, task: PTTaskMessageAllData, response: any) -> PTTaskProcessResponseMessageResponse:
        pass