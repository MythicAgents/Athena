from mythic_container.MythicCommandBase import *
import json
from mythic_container.MythicRPC import *


class RunPyArguments(TaskArguments):
    def __init__(self, command_line, **kwargs):
        super().__init__(command_line, **kwargs)
        self.args = [
            CommandParameter(
                name="pyfile",
                type=ParameterType.File,
                description="Python File to execute",
                parameter_group_info=[ParameterGroupInfo(ui_position=0)],
            ),
        ]

    async def parse_arguments(self):
        if len(self.command_line) > 0:
            if self.command_line[0] == "{":
                self.load_args_from_json_string(self.command_line)
            else:
                self.add_arg("path", self.command_line)
        else:
            raise ValueError("Missing arguments")


class RunPyCommand(CommandBase):
    cmd = "python"
    needs_admin = False
    help_cmd = "python"
    description = "Load python files using standard lib by utlising ironpython, You will need a to wrap your Code in function called Execute()"
    version = 1
    author = "@tr41nwr3ck"
    argument_class = RunPyArguments
    #attackmapping = ["T1005", "T1552.001"]
    attackmapping = []
    attributes = CommandAttributes(
    )

    async def create_tasking(self, task: MythicTask) -> MythicTask:
        file_resp = await MythicRPC().execute("get_file",
                                              file_id=taskData.args.get_arg("file"),
                                             task_id=taskData.Task.ID,
                                              get_contents=True)
        if file_resp.status == MythicRPCStatus.Success:
            if len(file_resp.response) > 0:
                task.args.add_arg("asm", file_resp.response[0]["contents"])
                task.display_params = f"{file_resp.response[0]['filename']}"
            else:
                raise Exception("Failed to find that file")
        else:
            raise Exception("Error from Mythic trying to get file: " + str(file_resp.error))

        return response

    async def process_response(self, response: AgentResponse):
        pass
